<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ChenHsingYu</title>
    <link>https://idreamshen.github.io/posts/</link>
    <description>Recent content in Posts on ChenHsingYu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 22 Aug 2019 22:01:41 +0800</lastBuildDate>
    
        <atom:link href="https://idreamshen.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>羽毛球</title>
      <link>https://idreamshen.github.io/posts/badminton/</link>
      <pubDate>Thu, 22 Aug 2019 22:01:41 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/badminton/</guid>
      <description>&lt;p&gt;今天是周四，晚上下班后，我与往常一样背上了羽毛球拍，前往佩佩公司。今天很是期待和佩佩的配合是否有显著提高，因为上周六和佩佩单独练习了两个小时，我感觉佩佩掌握到了一些羽毛球的规律。&lt;/p&gt;

&lt;p&gt;这次两个场地，只来了六个人。那正好，一边单打，一边双打。我和佩佩自然是选择了双打的那一方，我也是信心满满的。果然，虽然对方是两位男生，但实力不及我们，基本上打个高远球或带角度的球就大概率能取胜。我们这一方虽然胜率很高，但是佩佩的发球、接球、跑位等全都表现的很不好，远不如上周六我们单独练习时候的状态。于是，我开启了“叨叨”模式，只要我觉得佩佩哪里不对，我就会“叨念”一下。整整三场比赛就在我这不停的“叨念”下结束了，虽然我们赢了不少球，但是赢得不开心，因为佩佩不开心了。&lt;/p&gt;

&lt;p&gt;假如我和一位高手一起双打时，那位高手不断的指出我的错误点，那我也会觉得有些烦躁。内心会有一种声音“你别总指指点点了，我自己会打好的”。佩佩也是一样的，更何况我不是什么高手，我只能算是菜鸟中比较会打羽毛球的。我这样的水平还不断的指指点点，那佩佩内心是大写的不服。同时，我的教导方式也有问题。我是生搬硬套把之前别人教我的方式，原封不动的在教佩佩，这显然是行不通的，因为我和佩佩对待羽毛球这项运动的思路是不同的。佩佩认为羽毛球主要是锻炼身体，工作过后的放松放松，水平循序渐进即可。而我觉得羽毛球是个竞技运动，比的就是技巧水平，所以既然要打羽毛球，那就要打得比别人好，要赢。这两种心态也就造成了我们在羽毛球上的理解大不相同了。我在这个度上拿捏的很不好，过于陶醉于自己的节奏中，而忽略了佩佩内心的真实感受。&lt;/p&gt;

&lt;p&gt;经过我们互相阐述各自的内心思考，这会佩佩已经很开心了。所以下周羽毛球接着打，不过我要好好把握下教导方式了。&lt;/p&gt;

&lt;p&gt;对了，因为今天惹佩佩不高兴了，所以这个周末安排一次出省游玩。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs 入门</title>
      <link>https://idreamshen.github.io/posts/emacs-beginner/</link>
      <pubDate>Fri, 31 May 2019 19:13:17 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/emacs-beginner/</guid>
      <description>&lt;h3 id=&#34;基础概念&#34;&gt;基础概念&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Mac 系统中有两个按键是长按的。第一个是 Ctrl 键，在 Emacs 中也表示 Ctrl 键，简写为 C。另一个是 option 键，在 Emacs 中表示为 Meta 键，简写为 M。&lt;/li&gt;
&lt;li&gt;使用 C-x C-c 退出 Emacs&lt;/li&gt;
&lt;li&gt;使用 C-g 即可中断当前的各种按键操作&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;启动-emacs&#34;&gt;启动 Emacs&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;在命令行输入 emacs 即可启动&lt;/li&gt;
&lt;li&gt;第一次打开会进入欢迎界面，按键 C-x b 进行切换 Buffer（C-x b 中的 b 就是 buffer），第一个默认 buffer 是 *scratch*，回车即可&lt;/li&gt;
&lt;li&gt;然后随便输入几个字符，打打回车等&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;光标移动&#34;&gt;光标移动&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;C-n 移动到下一行。n 代表 next。&lt;/li&gt;
&lt;li&gt;C-p 移动到上一行。p 代表 previous。&lt;/li&gt;
&lt;li&gt;C-f 移动到下一个字母。f 代表 forward。&lt;/li&gt;
&lt;li&gt;C-b 移动到前一个字母。b 代表 back。&lt;/li&gt;
&lt;li&gt;C-a 回到行首。a 表示为字母中的第一个。&lt;/li&gt;
&lt;li&gt;C-e 回到行末。e 代表 end。&lt;/li&gt;
&lt;li&gt;M-b 回到单词头部。&lt;/li&gt;
&lt;li&gt;M-f 回到单词尾部。&lt;/li&gt;
&lt;li&gt;M-a 回到段落头部。&lt;/li&gt;
&lt;li&gt;M-e 回到段落尾部。&lt;/li&gt;
&lt;li&gt;C-l 将当前行置为窗口中间、或顶部、或底部&lt;/li&gt;
&lt;li&gt;C-v 向下滚动一屏&lt;/li&gt;
&lt;li&gt;M-v 向上滚动一屏&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;分屏-window&#34;&gt;分屏（window）&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;C-x 2 水平分割为 2 个窗口&lt;/li&gt;
&lt;li&gt;C-x 3 垂直分割为 2 个窗口&lt;/li&gt;
&lt;li&gt;C-x o 跳转到另一个窗口。o 代表 other。&lt;/li&gt;
&lt;li&gt;C-x 0 隐藏当前窗口&lt;/li&gt;
&lt;li&gt;C-x 1 将当前窗口窗口展开&lt;/li&gt;
&lt;li&gt;C-x k 关闭当前 Buffer&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;文件操作&#34;&gt;文件操作&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;C-x C-f 打开某个文件，如果不存在则新建一个&lt;/li&gt;
&lt;li&gt;C-x C-s 保存文件&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;查找帮助&#34;&gt;查找帮助&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;C-h k 查看按键含义。k 代表 key&lt;/li&gt;
&lt;li&gt;C-h v 查看变量含义。v 代表 variable&lt;/li&gt;
&lt;li&gt;C-h f 查看函数含义。f 代表 function&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;学习-emacs-自带的帮助文件&#34;&gt;学习 Emacs 自带的帮助文件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;M-x help-with-tutorial-spec-language&lt;/li&gt;
&lt;li&gt;输入 Chinese-GBK 回车&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>复盘</title>
      <link>https://idreamshen.github.io/posts/apologize/</link>
      <pubDate>Fri, 24 May 2019 17:22:13 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/apologize/</guid>
      <description>&lt;p&gt;今早站会的快结束时，抛了这样一个问题出来：大家对每天早上的站会有没有意见？同事 Y 说到：每天站会的频率会不会有点高？诚然，这个问题在我当初提出每天站会的建议时我就想过了。对于一些小需求来说，每天站会确实会有些繁琐，多多少少会浪费点团队的时间。但对于一个大需求来说，这样的站会则是非常有意义的，因为它能保证整个团队的信息通畅，团队内不会有信息差，相关问题及早被抛出。站会的本质是沟通，最终是为了解决沟通问题。测试小组对于这一点也表示了认可。&lt;/p&gt;

&lt;p&gt;回到标题，我这次要复盘什么？不是复盘我最近的工作，而是复盘我昨晚惹你生气这件事。我写这篇文章的时候，我已经在你家里了。我是被你“逼着”写下这篇复盘的。说实话，我一开始完全不知道该如何去复盘这件事情，因为很可笑的是我竟然并不明白昨晚到底是怎么惹你生气的。所以就在刚刚，我如实的询问了你。出乎意料的是，你拿出了一张 A4 纸让我自己看。整整一页的 A4 纸上写满了文字，上面记录了你的心里历程以及你对这件事情的复盘。我一行一行得阅读完，沉思了片刻。转身抱住了你，两个人就这么眼泪汪汪的抱在了一起。&lt;/p&gt;

&lt;p&gt;吵架复盘。这是你在文章中提到的一个很重要的概念。我曾经假象过这样的一种形式：每个月的固定某一天，两个人相约一个咖啡馆，彼此面对面坐着，然后互相表达对于对方的赞美与批评。我觉得这种方式与吵架复盘有种一样的作用，都是可以做一个阶段性总结，然后从中理解到更深刻的内容。在很多企业里，是经常倡导复盘文化的。而在感情生活中，我觉得复盘文化是尤为重要。工作是可以随时更换的，而感情是无法随时更换的，而且也不甘轻易更换。复盘就是两个人在冷静状态下，对事情作分析总结，从而避免下次重蹈覆辙。&lt;/p&gt;

&lt;p&gt;我也明白自己昨天做错了什么：我没有一些重要的事情放在心上，并且这种事情发生过不止一次。那我如何解决这个问题呢？我现在的做法是把所有重要的事情都记录到我的日常任务中。这么做能把许多重要的事记录到脑子里，与此同时，我把你的事记录到心里，反复叨念。&lt;/p&gt;

&lt;p&gt;佩佩，我一直在你身边哦。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>回首 2018</title>
      <link>https://idreamshen.github.io/posts/2018-review/</link>
      <pubDate>Sat, 02 Feb 2019 19:59:07 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/2018-review/</guid>
      <description>&lt;p&gt;2018 年末看到很多人在做年终总结，自己也是心痒痒，想着也该总结总结。可这一想一拖，一个月便过去了。而如今马上就要迎来农历 2019 年，所以今天务必执笔写下自己的想法。&lt;/p&gt;

&lt;h2 id=&#34;工作&#34;&gt;工作&lt;/h2&gt;

&lt;p&gt;2018 年的 5 月，我从一家工作了近 4 年的创业公司跳槽至了 N 司。这对我的职业生涯来说，确实是一大转折。这家创业公司我暂且称为 V 司吧。当年我是以一个机械行业的大学学渣身份，凭借着对计算机的满腔热血侥幸加入了 V 司。在 V 司我最欣赏的人是 Y 大。Y 大的到来使我在认知上产生了变革，我逐渐意识到演讲、沟通、影响力等的重要性。可以说，软实力这方面是我这一年体会比较深刻的，软实力和人的情商有关。工作环境里接触到的朋友智商差异其实并不大，但是情商却是完全不同。而我就是属于情商低的那一类人。&lt;/p&gt;

&lt;p&gt;离开 V 司后，我仍然与 V 司的小伙伴们保持的联系，所以他们也时不时的问我有没有回归的想法。而对于这个问题，我确实是有自己的想法的。我很喜欢 V 司小团队内的凝聚力，同事之间愉快的相处，以及积极的学习氛围。我在 V 司待的时间也是格外的长久，所以我已经被定义为核心成员了。然而，我当时似乎并不理解什么是核心成员，只认为我不过是在这家公司待的比较久而已。现在对核心成员的定义有了新的认识：你参与了公司大大小小重要的业务，你不仅仅需要去解决业务的技术难题，你同时更需要把握产品未来的走向，你应当把更多的精力放置于团队身上，而不是只关注个人的成长。我当初认为自己最多是一名技术核心成员，其实这完全是错误的。这个年代往往缺少的是交叉型人才，技术、产品、管理这三者都懂的人才。你深耕某个领域没有问题，但是当你在小团队里想做成功一件事的时候，你需要的是多领域的知识。诚然，这次从 V 司离开是有些后悔的，因为我放弃了快速成为交叉型人才的最佳机会。但这后悔药吃了也没用，这些道理都是半年后才逐渐想通的。那回到一开始的问题，今年我要回归 V 司吗？我目前还无法给出答案，有待商榷。我现在最缺的东西是面包，N 司可以很稳定的向我供给面包，而 V 司的面包在如今的资本寒冬里多少会有缩水。19 年这一年的整体国内面包水平如何还不好说，但是在 N 司会有放心的保障。不论 19 年在哪家公司，我都应当向交叉型人才这个方向努力。&lt;/p&gt;

&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;

&lt;p&gt;我挺喜欢打乒乓球的，所以刚入职 N 司的那段时间里天天打乒乓，水平也是有了不少进步。以前反手完全不会，现在倒也可以靠反手切磋好几个来回了。也通过乒乓结识了一帮球友，大家水平参差不齐，但打得依然很高兴。&lt;/p&gt;

&lt;p&gt;百词斩坚持了一段时间，最佳记录是连续背了 3 个月。但下半年期间单词就背得比较差，只是偶尔背背，坚持不下来。上班路上则习惯听播客。常听的有《潘吉 JENNY 告诉你》、《得意忘形》、《加州101》、《疯投圈》、《TED RADIO HOUR》这几档节目，像《得意忘形》和《疯投圈》是 JZ 推荐给我的，在此表示感谢。前面提到的播客基本与我本职工作无关，所以有一段时间我试着在路上去听技术类的播客，比如《极客时间》，但效果甚差，遂放弃。&lt;/p&gt;

&lt;p&gt;现在我已经可以熟练使用 Emacs 的 Org 模式对生活和工作进行关键事件记录了，包括我最近的文章也是使用 Org 格式进行编写的。&lt;/p&gt;

&lt;p&gt;19 年 1 月的时候我和 KY 两人一起前往日本去滑雪。用年假然后加上周末凑到了 8 天的来回旅途。KY 是我以前公司的同事，17 年一起去大明山滑雪后，所以后来就相约一起出国滑雪。整个日本旅游计划基本是 KY 在打理，我也确实十分感谢 KY 的付出。日本的交通非常复杂，全靠“乘换案内”这个 APP 解决了各类交通路线。我们一共连续滑了三天的雪，滑到筋疲力尽，不过总算是滑雪入门了。回国后，我们又找到了同样喜欢滑雪的小伙伴，所以准备在 19 年年底的时候，继续组织一次出国滑雪旅游。&lt;/p&gt;

&lt;h2 id=&#34;情感&#34;&gt;情感&lt;/h2&gt;

&lt;p&gt;下半年的时候，不知道是缘分还是什么，我和小 C，八竿子打不着的两人就这么偶遇然后认识了。当然，这其中有球友 L 的撮合，但也能算是机缘巧合吧。这篇文章小 C 应该不会看到的，所以我先说一件比较离奇的事情。与小 C 第一次见面后的第二天，也就是周一，我收到了一个快递提醒。最近也没买什么东西，怎么会有快递呢？带着疑惑，我便离开工位去取我快递了。原来是一份文件快递，估计是哪位商家给我寄来的发票吧。回到工位，拆开快递后吓了我一跳。原来里面并不是商品发票，而是一份字体工工整整的情书。对，居然是一份情书。我快速看完了书信内容，仔细瞅了一眼信末b的落款，这竟然是 H 寄给我的。&lt;/p&gt;

&lt;h2 id=&#34;未来&#34;&gt;未来&lt;/h2&gt;

&lt;p&gt;前面流水账般的记录了一些去年发生的事情，零零散散，有些乱。对于新的一年，做了如下规划时刻提醒自己。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;认真经营感情。&lt;/li&gt;
&lt;li&gt;学习产品思维，向交叉型人才方向发展，全面提高认知能力。&lt;/li&gt;
&lt;li&gt;寻找自己的第二职业，增加“睡后”收入。&lt;/li&gt;
&lt;li&gt;扩大交际圈，多参加各种户外活动，比如 MAD、公益组织之类。&lt;/li&gt;
&lt;li&gt;上半年参与买房摇号，买辆代步车。&lt;/li&gt;
&lt;li&gt;学会理财。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>1Password 快捷键</title>
      <link>https://idreamshen.github.io/posts/one-password-hotkey/</link>
      <pubDate>Thu, 03 Jan 2019 15:19:58 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/one-password-hotkey/</guid>
      <description>&lt;p&gt;1Password 是有快捷键的，我是用了一年后才知道。使用快捷键后真的是行云流水般的速度。
本文就介绍一下我自己 Mac 系统中常用的快捷键。&lt;/p&gt;

&lt;h3 id=&#34;command&#34;&gt;Command + \&lt;/h3&gt;

&lt;p&gt;呼出 1Password 浮动窗口并填充。在浏览器页面上呼出时，会自动过滤出匹配到的账号。如果是精确匹配的话，则会自动填充至表单中。如果不是精确匹配，那么需要使用方向键和回车键来选择填充。&lt;/p&gt;

&lt;h3 id=&#34;command-shift-c&#34;&gt;Command + Shift + C&lt;/h3&gt;

&lt;p&gt;复制 1Password 当前高亮的密码。当遇到非浏览器页面时，那就很难实现自动填充了。但是上面这个快捷键可以快速复制密码，然后在 Command + V 粘贴到软件的密码栏中即可。&lt;/p&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/35195&#34; title=&#34;1Password for Mac 使用指南&#34;&gt;1Password for Mac 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>伪造微信群发助手截图</title>
      <link>https://idreamshen.github.io/posts/wechat-broadcast-message-fake-picture/</link>
      <pubDate>Mon, 03 Dec 2018 15:16:57 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/wechat-broadcast-message-fake-picture/</guid>
      <description>&lt;p&gt;需求是这样的，我妈公司搞商场活动，每天需要上传5张微信群发200人的截图。&lt;/p&gt;

&lt;p&gt;我第一反应是网上应该有微信聊天生成器这种，那会不会有微信群发助手生成器呢？很遗憾，我在 GitHub 上搜了一圈，没找到开源的微信聊天生成器，更不用说群发助手生成器了。怎么办呢？&lt;/p&gt;

&lt;p&gt;那我们先对这个截图需求进行拆解，逐一突破。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;群发助手的文案应当与活动文案一致&lt;/li&gt;
&lt;li&gt;群发助手的收件人人数必须是200人&lt;/li&gt;
&lt;li&gt;群发助手的收件人昵称应当很多，最后显示为 ... 表示还有更多&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后分析下来，采用方案就是利用修图达到伪造效果。下面分享下其中的一些步骤（以下步骤与上方序号并不是一一对应的）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;找到3～4个微信好友，能接受你微信消息骚扰的那种。然后修改他们的微信备注名，备注名的要求是包含英文逗号，使得一个微信号的昵称看上去是几个微信号连起来的，比如“天空,Away,时间,加菲猫”&lt;/li&gt;
&lt;li&gt;打开微信群发助手，勾选刚刚备注过的微信好友，然后发送正确的文案。那么这时你会在群发助手历史记录里看到“4位收件人：xxx,xxx,xxx,xxx,xxx,xxx,xxx...”。因为刚刚这几位好友的昵称特别长，且包含英文逗号，所以展示的时候会被截断，同时从界面上看起来发给了不止4位好友&lt;/li&gt;
&lt;li&gt;接下来就剩一个“收件人人数”的问题了，那用修图的方式来进行篡改。这里为了控制经济成本（没买 Photoshop），所以使用了网上免费的在线图片编辑网站进行操作，我用的是 http://www.uupoop.com 这家。修改人数的数字，然后重新导出图片即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最后来看一下对比图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://idreamshen.github.io/image/wechat-broadcast-message-original.jpeg&#34; alt=&#34;原始图&#34; title=&#34;原始图&#34; /&gt;
&lt;img src=&#34;https://idreamshen.github.io/image/wechat-broadcast-message-fake.jpeg&#34; alt=&#34;伪造图&#34; title=&#34;伪造图&#34; /&gt;&lt;/p&gt;

&lt;p&gt;注意，上面伪造图中数字字体是有问题的，细看是能发现字体不对的。但是就本需求实际来说，已经达到交付效果了。&lt;/p&gt;

&lt;p&gt;好了，在双12来临之前，都需要这么忙上一阵子了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>修复 Chrome 控制台字体大小</title>
      <link>https://idreamshen.github.io/posts/fix-chrome-console-font-size/</link>
      <pubDate>Mon, 05 Nov 2018 19:23:00 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/fix-chrome-console-font-size/</guid>
      <description>&lt;p&gt;最近在调试 Web 应用时发现 Chrome 的控制台字体非常大，相当影响调试体验。在 Chrome 中调整了一遍字体相关的配置，仍然无效。
下图就是字体很大的情况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://idreamshen.github.io/image/chrome-console-font-size-large.png&#34; alt=&#34;Chrome Console Large Font&#34; title=&#34;Chrome Console Large Font&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后来终于找到解决方案，原来可以通过快捷键调整字体大小。具体的操作步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开 Chrome Console 界面&lt;/li&gt;
&lt;li&gt;使用鼠标激活 Console 界面，即保持当前焦点位于 Console 上&lt;/li&gt;
&lt;li&gt;使用 Command +/- 快捷键来放大或缩小字体，使用 Command 0 则是重置字体大小。（如果是 Windows 系统，则请使用 Control 键）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://idreamshen.github.io/image/chrome-console-font-size-small.png&#34; alt=&#34;Chrome Console Small Font&#34; title=&#34;Chrome Console Small Font&#34; /&gt;&lt;/p&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;https://stackoverflow.com/questions/7613546/increase-font-size-chrome-console&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>如何观看 Netflix</title>
      <link>https://idreamshen.github.io/posts/how-to-watch-netflix/</link>
      <pubDate>Fri, 20 Apr 2018 16:14:14 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/how-to-watch-netflix/</guid>
      <description>&lt;p&gt;前段时间用某云的 HK 节点自建梯子观看 Netflix 很流畅，但是最近发现 HK 节点已无法正常观看。更换了该云上的 IP 后依然无法正常观看。&lt;/p&gt;

&lt;p&gt;经过一番折腾，找到了一家不错的梯子，可以顺利观看 Netflix，下面就简要介绍一番。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;服务商为 &lt;a href=&#34;https://hkssnetwork.net/&#34; title=&#34;https://hkssnetwork.net/&#34;&gt;https://hkssnetwork.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注册 hkss 账号&lt;/li&gt;
&lt;li&gt;充值 11 元&lt;/li&gt;
&lt;li&gt;购买最低配的 50G 流量套餐&lt;/li&gt;
&lt;li&gt;在 iPad 上使用梯子连接新的服务器&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://idreamshen.github.io/image/netflix.jpg&#34; alt=&#34;netflix.jpg&#34; title=&#34;netflix.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;由于 Netflix 无法截图播放界面，但是实测播放相当流畅，hava fun~&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 GIT 克隆指定 TAG 或分支</title>
      <link>https://idreamshen.github.io/posts/git-clone-specific-tag-or-branch/</link>
      <pubDate>Sat, 14 Apr 2018 15:33:31 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/git-clone-specific-tag-or-branch/</guid>
      <description>&lt;h2 id=&#34;命令&#34;&gt;命令&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;git clone -b &amp;#39;v2.0&amp;#39; --single-branch --depth 1 https://github.com/git/git.git&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;v2.0 代指 branch 或 tag&lt;/li&gt;
&lt;li&gt;depth 表示 clone 深度，如果待克隆的项目很大，同时您不关注代码的变更历史，那可以使用 depth=1 提高 clone 速度&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/791959/download-a-specific-tag-with-git?utm_medium%3Dorganic&amp;amp;utm_source%3Dgoogle_rich_qa&amp;amp;utm_campaign%3Dgoogle_rich_qa&#34; title=&#34;Download a specific tag with Git&#34;&gt;Download a specific tag with Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>从 JDK Hotspot 源码探讨线程状态</title>
      <link>https://idreamshen.github.io/posts/thread-status-from-jdk-hotspot/</link>
      <pubDate>Wed, 11 Apr 2018 13:54:13 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/thread-status-from-jdk-hotspot/</guid>
      <description>&lt;p&gt;src/share/vm/classfile/javaClasses.hpp&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Java Thread Status for JVMTI and M&amp;amp;M use.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// This thread status info is saved in threadStatus field of
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// java.lang.Thread java class.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;enum&lt;/span&gt; ThreadStatus {
  NEW                      &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;,
  RUNNABLE                 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_ALIVE &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// runnable / running
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                             JVMTI_THREAD_STATE_RUNNABLE,
  SLEEPING                 &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_ALIVE &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Thread.sleep()
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                             JVMTI_THREAD_STATE_WAITING &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_SLEEPING,
  IN_OBJECT_WAIT           &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_ALIVE &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Object.wait()
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                             JVMTI_THREAD_STATE_WAITING &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_WAITING_INDEFINITELY &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_IN_OBJECT_WAIT,
  IN_OBJECT_WAIT_TIMED     &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_ALIVE &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Object.wait(long)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                             JVMTI_THREAD_STATE_WAITING &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_IN_OBJECT_WAIT,
  PARKED                   &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_ALIVE &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// LockSupport.park()
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                             JVMTI_THREAD_STATE_WAITING &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_WAITING_INDEFINITELY &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_PARKED,
  PARKED_TIMED             &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_ALIVE &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// LockSupport.park(long)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                             JVMTI_THREAD_STATE_WAITING &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;
                             JVMTI_THREAD_STATE_PARKED,
  BLOCKED_ON_MONITOR_ENTER &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_ALIVE &lt;span style=&#34;color:#666&#34;&gt;+&lt;/span&gt;          &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// (re-)entering a synchronization block
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                             JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER,
  TERMINATED               &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; JVMTI_THREAD_STATE_TERMINATED
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;src/share/vm/prims/jvmti.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constants&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;jvmtiThreadState&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;label=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Thread State Flags&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;kind=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;bits&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_ALIVE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0001&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is alive. Zero if thread is new (not started) or terminated.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_TERMINATED&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0002&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread has completed execution.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_RUNNABLE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0004&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is runnable.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0400&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is waiting to enter a synchronization block/method or,
          after an &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Object.wait()&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;, waiting to re-enter a 
          synchronization block/method.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_WAITING&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0080&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is waiting.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_WAITING_INDEFINITELY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0010&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is waiting without a timeout.
          For example, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Object.wait()&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0020&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is waiting with a maximum time to wait specified.
          For example, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Object.wait(long)&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_SLEEPING&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0040&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is sleeping -- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Thread.sleep(long)&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_IN_OBJECT_WAIT&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0100&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is waiting on an object monitor -- &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Object.wait&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_PARKED&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x0200&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread is parked, for example: &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;LockSupport.park&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;,
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;LockSupport.parkUtil&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;LockSupport.parkNanos&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_SUSPENDED&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x100000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread suspended.
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;code&amp;gt;&lt;/span&gt;java.lang.Thread.suspend()&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
    or a &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;jvmti/&amp;gt;&lt;/span&gt; suspend function 
          (such as &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;functionlink&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;SuspendThread&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/functionlink&amp;gt;&lt;/span&gt;) 
          has been called on the thread. If this bit
    is set, the other bits refer to the thread state before suspension.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_INTERRUPTED&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x200000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    Thread has been interrupted.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_IN_NATIVE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x400000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
          Thread is in native code--that is, a native method is running
          which has not called back into the VM or Java programming
          language code.
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;p/&amp;gt;&lt;/span&gt;
          This flag is not set when running VM compiled Java programming
          language code nor is it set when running VM code or
          VM support code. Native VM interface functions, such as JNI and
          &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;jvmti/&amp;gt;&lt;/span&gt; functions, may be implemented as VM code.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_VENDOR_1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x10000000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
          Defined by VM vendor.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_VENDOR_2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x20000000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
          Defined by VM vendor.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;constant&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;JVMTI_THREAD_STATE_VENDOR_3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7d9029&#34;&gt;num=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;0x40000000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
          Defined by VM vendor.
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constant&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;&amp;lt;/constants&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当一个线程的状态为 225 时，转换成 16 进制则为 e1。
按照公式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;SLEEPING = JVMTI_THREAD_STATE_ALIVE +          // Thread.sleep()
           JVMTI_THREAD_STATE_WAITING +
           JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT +
           JVMTI_THREAD_STATE_SLEEPING&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以发现满足 e1 = 0x0001 + 0x0080 + 0x0020 + 0x0040（这4个数值与 jvmti.xml 一一对应），所以可以推断该线程当时处于 sleep 状态&lt;/p&gt;

&lt;p&gt;另外 threadService.hpp 文件控制了一个线程的 threadStatus，比如 JavaThreadSleepState 该函数就将线程状态修改为 java_lang_Thread::SLEEPING&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// Change status to sleeping
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#00f;font-weight:bold&#34;&gt;JavaThreadSleepState&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;public&lt;/span&gt; JavaThreadStatusChanger {
 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
  ThreadStatistics&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt; _stat;
  &lt;span style=&#34;color:#b00040&#34;&gt;bool&lt;/span&gt; _active;
 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
  JavaThreadSleepState(JavaThread &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;java_thread) &lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
    JavaThreadStatusChanger(java_thread, java_lang_Thread&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;SLEEPING) {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (is_alive()) {
      _stat &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; java_thread&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;get_thread_stat();
      _active &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ThreadService&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;is_thread_monitoring_contention();
      _stat&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;thread_sleep();
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (_active) {
        _stat&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;thread_sleep_begin();
      }
    } &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
      _active &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;false&lt;/span&gt;;
    }
  }

  &lt;span style=&#34;color:#666&#34;&gt;~&lt;/span&gt;JavaThreadSleepState() {
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (_active) {
      _stat&lt;span style=&#34;color:#666&#34;&gt;-&amp;gt;&lt;/span&gt;thread_sleep_end();
    }
  }
};&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>如何在国服使用 Apple News</title>
      <link>https://idreamshen.github.io/posts/how-to-use-apple-news-in-china/</link>
      <pubDate>Wed, 07 Mar 2018 14:56:06 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/how-to-use-apple-news-in-china/</guid>
      <description>&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;

&lt;p&gt;本文主要介绍如何使用 Apple News&lt;/p&gt;

&lt;h3 id=&#34;准备&#34;&gt;准备&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;iPad&lt;/li&gt;
&lt;li&gt;梯子&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;首次操作-仅需操作一次&#34;&gt;首次操作（仅需操作一次）&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;将 iPad 地区改为美国地区&lt;/li&gt;
&lt;li&gt;将 iPad 语言改为英文&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;运行步骤&#34;&gt;运行步骤&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;打开飞行模式&lt;/li&gt;
&lt;li&gt;连接无线网络，且确保自己的 iPad 网络处于梯子上&lt;/li&gt;
&lt;li&gt;找到 News 这个 APP，运行之，理论上就能正常展示新闻信息了&lt;/li&gt;
&lt;li&gt;关闭飞行模式&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;效果&#34;&gt;效果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://idreamshen.github.io/image/apple-news.jpg&#34; alt=&#34;News App in iPad&#34; title=&#34;News App in iPad&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;备注&#34;&gt;备注&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;上述飞行模式的切换不是必须的，但是切换飞行模式后能提高成功率&lt;/li&gt;
&lt;li&gt;不建议在 iPhone 上使用 News，iPhone 上运行 News 必须开启飞行模式&lt;/li&gt;
&lt;li&gt;一旦 News 加载新闻成功后，可以关闭梯子，因为 News 仅在启动时进行地域检测&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/t/223846#r_2466757&#34; title=&#34;https://www.v2ex.com/t/223846#r_2466757&#34;&gt;https://www.v2ex.com/t/223846#r_2466757&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Nodejs 鼠标点击</title>
      <link>https://idreamshen.github.io/posts/nodejs-mouse-click/</link>
      <pubDate>Tue, 16 Feb 2016 19:53:47 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/nodejs-mouse-click/</guid>
      <description>&lt;p&gt;今天玩 Clicker Heroes 的时候点鼠标点的累死,要是 mac 下也有个按键精灵就好了.在网上搜索一番后,找到了 robotjs 这个库,正和我意!&lt;/p&gt;

&lt;p&gt;于是,三行鼠标左键连点代码就有了.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;var robot = require(&amp;#34;robotjs&amp;#34;);

robot.setMouseDelay(80);

while (true) robot.mouseClick();&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以轻轻松松在 Clicker Heroes 中刷刷刷啦.&lt;/p&gt;

&lt;p&gt;robotjs 的 wiki 可以查阅: &lt;a href=&#34;https://github.com/octalmage/robotjs&#34;&gt;https://github.com/octalmage/robotjs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2015年终小结</title>
      <link>https://idreamshen.github.io/posts/2015-review/</link>
      <pubDate>Sat, 13 Feb 2016 12:12:49 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/2015-review/</guid>
      <description>&lt;p&gt;2015年是毕业后的第一年,工作经验终于增加了一年.这一年的努力如果要打个分的话,我给自己七分.这一年最大的变化是我能熟练的使用 Nodejs 开发各种项目以及开始学习了 Java.那接下来我就谈谈这一年里我对这两门语言的感受吧.&lt;/p&gt;

&lt;p&gt;Nodejs 是我这一年里使用次数最多的语言,我用它完成了若干个的项目.总结下来,用 Nodejs 开发有两个优点,开发快和性能高.我先说说开发快,由于 Nodejs 使用了 Javascript 这门语言作为编程语言, Javascript 的动态特性使得其在编写代码时非常简单.第二个优点是性能高,由于 Javascript 支持回调函数,使得异步IO并行操作,节省了大量的等待时间.但是 Nodejs 开发大型合作项目就有点麻烦了.一, IDE 无法很好地做到代码提示,二, 变量名方法名等重构困难.三, 弱类型很容易埋下了隐藏的漏洞.&lt;/p&gt;

&lt;p&gt;我举2个实例来看一下 Nodejs 和 Java 在编程上有什么区别.&lt;/p&gt;

&lt;p&gt;1.假设需求:通过一个网页向用户展示某件商品的相关信息.&lt;/p&gt;

&lt;p&gt;Nodejs 版 (Express Framework)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();
var Promise = require(&amp;#39;bluebird&amp;#39;);
var model = require(&amp;#39;./models/index&amp;#39;);

app.get(&amp;#39;/item&amp;#39;, function(req, res) {
    var itemId = req.query.itemId;
    var myUserId = req.session.userId;

    Promise.all([
        model.user.findById(myUserId),
        model.item.findById(itemId),
        model.itemDetail.findByItemId(itemId)
    ]).spread(function(user, item, itemDetail) {
        res.render(&amp;#39;item&amp;#39;, {
            me: user,
            item: item,
            itemDetail: itemDetail
        });
    }).catch(function(err) {
        res.render(&amp;#39;error&amp;#39;); // 渲染 error 页面
    });
});&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Java 版 (Spring Boot Framework)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;@Controller
public class ItemController {
    @Autowired private UserRepository userRepository;
    @Autowired private ItemRepository itemRepository;
    @Autowired private ItemDetailRepository itemDetailRepository;

    @RequestMapping(method = RequestMethod.GET, path = &amp;#39;/item&amp;#39;)
    public String itemRender(@RequestParam(value = &amp;#34;itemId&amp;#34;, required = true) int itemId,
                            Model model) {

        Session session;
        // ...
        int userId = session.getUserId();

        UserModel userModel = userRepository.findOne(userId);
        ItemModel itemModel = itemRepository.findOne(itemId);
        ItemDetailModel itemDetailModel = itemDetailRepository.findByItemId(itemId);

        model.addAttribute(&amp;#39;me&amp;#39;, userModel);
        model.addAttribute(&amp;#39;item&amp;#39;, itemModel);
        model.addAttribute(&amp;#39;itemDetail&amp;#39;, itemDetail);

        return &amp;#34;shop/item&amp;#34;;
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nodejs 版中第 11 行至 13 行是从数据库获取信息,通过 Promise 的 all 方法包裹后,三个 sql 语句并行执行,假设 3 条 sql 语句耗时分别为 1ms 1.2ms 0.8ms,那么第 14 行的代码将在 1.2ms 后执行.再看 Java 版,第 15 行至 17 行是串行查询,所以第 19 行会在 1 + 1.2 + 0.8 = 3ms 后执行.这也就是一定程度上, Nodejs 的速度要优于 Java.&lt;/p&gt;

&lt;p&gt;2.假设需求:实现一个机器人简单逻辑&lt;/p&gt;

&lt;p&gt;Nodejs 版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;function Bot(id) {
    this.id = id;
}

// 说话
Bot.prototype.talk = function(message) {
    // ...
}

// 走路
Bot.prototype.walk = function(direction, step) {
    // ...
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Java 版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;public class Bot {
    private int id;

    public Bot(int id) {
        this.id = id;
    }

    public void talk(String message) {
        // ...
    }

    public void walk(Direction direction, int step) {
        // ...
    }
}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从代码结构来看几乎是差不多的,但是当你运行上百个上千个机器人时,就有点区别了.假设生成了1000个机器人. Nodejs 中每个机器人的不同的属性就是 id,其他方法都是相同的引用,也就是会创建1000 份 Bot 对象和 1 份 Bot 原型链上的方法.而在 Java 中会创建 1000 个 Bot Class.两者的内存占用相差是不小的.这是我的个人理解,可能有错误.&lt;/p&gt;

&lt;p&gt;以上两个例子似乎都在夸 Nodejs ,但是在实际使用中, Nodejs 并不是如此好驾驭的,上面我也提到了一些缺点. Nodejs 个人觉得适合小型项目比较好,比如说智能家居上面.对的,今天我花了五百大洋买了个树莓派,希望能把 Nodejs 折腾上去,那么用事件的模式去处理日常生活的各种指令应该是不错的体验(等待快递中 0.0).&lt;/p&gt;

&lt;p&gt;展望一下新的一年吧.由于工作上的需要,我可能得把更多的心思花到 Java 上了.为了不落下 Nodejs 的学习,我将尽可能的用 Nodejs 去编写树莓派上的各种应用.同时还要补一下编程的基础知识,编程的设计模式啦之类的.&lt;/p&gt;

&lt;p&gt;暂时就写到这吧.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sequelize 中的事务循环插入</title>
      <link>https://idreamshen.github.io/posts/sequelize-transaction/</link>
      <pubDate>Thu, 13 Aug 2015 16:14:13 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/sequelize-transaction/</guid>
      <description>&lt;p&gt;sequelize 的事务模式详细使用方法可以参考官方文档
&lt;a href=&#34;http://docs.sequelizejs.com/en/latest/docs/transactions&#34;&gt;http://docs.sequelizejs.com/en/latest/docs/transactions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本文主要介绍一下如何在 sequelize 的事务中进行循环插入。
假设有两个模型 Order 和 OrderItem，一条 Order 记录会对应若干条 OrderItem 记录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; Promsise &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;bluebird&amp;#39;&lt;/span&gt;);


&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; insert () {
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; itemIds &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;];

  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; sequelize.transaction(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (t){
    &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; Order.create({
      name&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;XXX订单&amp;#39;&lt;/span&gt;,
      price&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;
    }, {transaction&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; t}).then(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (order){
      &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;Promise&lt;/span&gt;.map(itemIds, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt;(itemId) {
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; OrderItem.create({
          order_id&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; order.get(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;),
          item_id&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; itemId
        }, {transaction&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; t});
      });
    });
  });
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解决的方案就是采用 Promise.map 这个方法，它能遍历数组并返回 promise。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Socket.io 中一些有用的方法</title>
      <link>https://idreamshen.github.io/posts/socket-io-some-useful-funcs/</link>
      <pubDate>Tue, 11 Aug 2015 16:08:32 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/socket-io-some-useful-funcs/</guid>
      <description>

&lt;h3 id=&#34;io-use&#34;&gt;io.use&lt;/h3&gt;

&lt;p&gt;注册中间件。看一下下面的这个例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 服务端代码
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; io &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;)(); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 引用 socket.io 库并实例化
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;/** 注册中间件 **/&lt;/span&gt;
io.use(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (socket, next) {
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; query &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; socket.handshake.query; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 获取客户端的连接 url 中的参数
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; password &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; query.password; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 读取参数中密码
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (password &lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; next(); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 如果密码正确，则执行返回 next()
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  next(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;密码错误&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 如果密码错误，则抛出异常
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;});

&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;/** 监听事件 **/&lt;/span&gt;
io.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (socket) {
  socket.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;disconnect&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; () {
    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 客户端断线
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  });

  socket.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (body) {
    &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 服务器收到客户端发来的消息
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 客户端代码
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;script src&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;/socket.io/socket.io.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#b68&#34;&gt;/script&amp;gt; /&lt;/span&gt;&lt;span style=&#34;&#34;&gt;/ 加载 socket.io.js&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; socket &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; io(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;http://localhost&amp;#39;&lt;/span&gt;, {query&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;password=654321&amp;#39;&lt;/span&gt;}); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 实例化并连接到 socket 服务器，传入密码参数
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;/** 监听 error 事件 **/&lt;/span&gt;
  socket.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (err) {
    console.log(err); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 打印 err，注：err 是字符串类型
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  });

  socket.send(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;hello server&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，当客户端尝试连接服务器时，因为传入的密码是 654321，导致服务端的中间件认证失败，触发客户端的 error 事件。客户端代码第 8 行会打印出“密码错误”这几个字。&lt;/p&gt;

&lt;p&gt;注意服务端代码中第 9 行的 return 不能省略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 服务端代码
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; io &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;)(); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 引用 socket.io 库并实例化
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;/** 注册中间件 **/&lt;/span&gt;
io.use(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (socket, next) {
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; query &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; socket.handshake.query; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 获取客户端的连接 url 中的参数
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; password &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; query.password; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 读取参数中密码
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (password &lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;) next(); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 如果密码正确，则执行返回 next()
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  next(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;密码错误&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 如果密码错误，则抛出异常
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意第 9 行，如果省略 return，则会导致第 10 行代码也被执行。可以将代码修改成下面的更易理解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 服务端代码
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; io &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;)(); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 引用 socket.io 库并实例化
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;/** 注册中间件 **/&lt;/span&gt;
io.use(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (socket, next) {
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; query &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; socket.handshake.query; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 获取客户端的连接 url 中的参数
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; password &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; query.password; &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 读取参数中密码
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (password &lt;span style=&#34;color:#666&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;) {
    next(); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 如果密码正确，则执行返回 next()
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  } &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; {
    next(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#008000&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;密码错误&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 如果密码错误，则抛出异常
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;  }
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ack-模式&#34;&gt;ACK 模式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 服务端
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; io &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;)();

io.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connection&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (socket) {
  socket.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;chat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (msg, callback) {
    callback({
      success&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;true&lt;/span&gt;
    });
    io.emit(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;chat&amp;#39;&lt;/span&gt;, msg);
  });
});&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 客户端
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;var&lt;/span&gt; socket &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; io();
  socket.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; () {
    socket.emit(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;chat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (response) {
      console.log(response.success); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 打印结果为 true
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    });

    socket.on(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;chat&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;function&lt;/span&gt; (response) {
      console.log(response); &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// 打印结果为 Hello
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;    });
  });
&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Redis 几个常用的简单命令</title>
      <link>https://idreamshen.github.io/posts/redis-func/</link>
      <pubDate>Tue, 11 Aug 2015 15:27:19 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/redis-func/</guid>
      <description>

&lt;h3 id=&#34;redis-cli&#34;&gt;redis-cli&lt;/h3&gt;

&lt;p&gt;连接数据库
例子：&lt;code&gt;redis-cli&lt;/code&gt; 连接到本地
例子：&lt;code&gt;redis-cli -h 192.168.1.27&lt;/code&gt; 连接到远程&lt;/p&gt;

&lt;h3 id=&#34;type&#34;&gt;type&lt;/h3&gt;

&lt;p&gt;查看某个 key 的类型
例子：&lt;code&gt;type key&lt;/code&gt;，返回的结果可能有 &lt;code&gt;string&lt;/code&gt;，&lt;code&gt;set&lt;/code&gt;，&lt;code&gt;list&lt;/code&gt; 等&lt;/p&gt;

&lt;h3 id=&#34;keys&#34;&gt;keys&lt;/h3&gt;

&lt;p&gt;查看所有的 key
例子：&lt;code&gt;keys *&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;smembers&#34;&gt;smembers&lt;/h3&gt;

&lt;p&gt;查看某个 sets 类型的所有成员
例子：&lt;code&gt;smembers key&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;hgetall&#34;&gt;hgetall&lt;/h3&gt;

&lt;p&gt;查看某个 hash 类型的所有成员
例子：&lt;code&gt;hgetall key&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello Hexo</title>
      <link>https://idreamshen.github.io/posts/hello-world/</link>
      <pubDate>Tue, 11 Aug 2015 14:46:57 +0800</pubDate>
      
      <guid>https://idreamshen.github.io/posts/hello-world/</guid>
      <description>&lt;p&gt;今天用了下 Hexo，很爽，简洁明了的博客系统。就在这记录些我自己平时的所见所闻吧。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>